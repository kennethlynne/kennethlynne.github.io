import * as React from "react";
import { Frame, PropertyControls, ControlType, Size } from "framer";

type Appearance = "dark" | "light";

interface Props {
  title: string;
  appearance: Appearance;
  width: number;
  height: number;
}

export class Window extends React.Component<Props> {
  static defaultProps = {
    title: "Window Title",
    appearance: "light",
    width: 250
  };

  static propertyControls: PropertyControls<Props> = {
    title: { type: ControlType.String, title: "Title" },
    appearance: {
      type: ControlType.Enum,
      options: ["dark", "light"],
      optionTitles: ["Dark", "Light"],
      title: "Appearance"
    }
  };

  children(size: Size) {
    return React.Children.map(this.props.children, child => {
      if (typeof child === "string" || typeof child === "number") return child;
      return React.cloneElement(child, { ...size });
    });
  }

  render() {
    const { width, height, title, appearance } = this.props;

    const constentSize = {
      width,
      height: Math.max(height - 22, 0)
    };

    return (
      <div style={windowStyle(appearance, width, height)}>
        <div style={toolbarStyle(appearance)}>
          {windowControls()}
          {title ? title : ""}
          <div style={spacer} />
        </div>
        <div
          style={{
            width: constentSize.width,
            height: constentSize.height
          }}
        >
          {this.children(constentSize)}
        </div>
      </div>
    );
  }
}

function windowStyle(
  appearance: Appearance,
  width: number,
  height: number
): React.CSSProperties {
  const isDark = appearance === "dark";
  return {
    width,
    height,
    background: isDark ? "#2D2D2D" : "#EDEDED",
    borderRadius: 4,
    willChange: "transform",
    overflow: "hidden",
    boxShadow:
      "0 0 20px rgba(0,0,0,.15), 0 25px 30px rgba(0,0,0,.35), 0 0 0 1px rgba(0,0,0,.1)"
  };
}

function toolbarStyle(appearance: Appearance): React.CSSProperties {
  const isDark = appearance === "dark";
  return {
    width: "100%",
    height: 22,
    background: isDark
      ? "linear-gradient(#4B4B4B, #3D3D3D)"
      : "linear-gradient(#EDECED, #D2D1D2)",
    paddingLeft: 8,
    paddingRight: 8,
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    fontSize: 13,
    overflow: "hidden",
    whiteSpace: "nowrap",
    color: isDark ? "white" : "black",
    boxShadow: isDark
      ? "inset 0 -1px rgba(0,0,0,1), inset 0 -1px rgba(43,43,43,1), inset 0 -1px rgba(255,255,255,0.01)"
      : "inset 0 1px 1px rgba(255,255,255,0.5), inset 0 -1px rgba(183,180,183,1), inset 0 -1px rgba(183,180,183,0.3)"
  };
}

function windowControls() {
  return (
    <div style={windowControlWrapper}>
      <div style={windowControlItem("#FF6157", "#E24640")} />
      <div style={windowControlItem("#FFC12F", "#DFA023")} />
      <div style={windowControlItem("#2ACB42", "#1BAC2C")} />
    </div>
  );
}
const windowControlWrapper: React.CSSProperties = {
  width: 52,
  flexShrink: 0,
  height: "100%",
  display: "flex",
  alignItems: "center",
  justifyContent: "space-between"
};

function windowControlItem(
  background: string,
  borderColor: string
): React.CSSProperties {
  return {
    width: 12,
    height: 12,
    background,
    borderRadius: "50%",
    boxShadow: `inset 0 0 0 1px ${borderColor}`
  };
}

const spacer: React.CSSProperties = {
  width: 52
};
